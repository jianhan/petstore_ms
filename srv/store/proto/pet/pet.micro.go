// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/pet/pet.proto

package store

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PetService service

type PetService interface {
	InsertPet(ctx context.Context, in *InsertPetRequest, opts ...client.CallOption) (*InsertPetResponse, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...client.CallOption) (*Empty, error)
}

type petService struct {
	c    client.Client
	name string
}

func NewPetService(name string, c client.Client) PetService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "store"
	}
	return &petService{
		c:    c,
		name: name,
	}
}

func (c *petService) InsertPet(ctx context.Context, in *InsertPetRequest, opts ...client.CallOption) (*InsertPetResponse, error) {
	req := c.c.NewRequest(c.name, "PetService.InsertPet", in)
	out := new(InsertPetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petService) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "PetService.UpdatePet", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PetService service

type PetServiceHandler interface {
	InsertPet(context.Context, *InsertPetRequest, *InsertPetResponse) error
	UpdatePet(context.Context, *UpdatePetRequest, *Empty) error
}

func RegisterPetServiceHandler(s server.Server, hdlr PetServiceHandler, opts ...server.HandlerOption) error {
	type petService interface {
		InsertPet(ctx context.Context, in *InsertPetRequest, out *InsertPetResponse) error
		UpdatePet(ctx context.Context, in *UpdatePetRequest, out *Empty) error
	}
	type PetService struct {
		petService
	}
	h := &petServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PetService{h}, opts...))
}

type petServiceHandler struct {
	PetServiceHandler
}

func (h *petServiceHandler) InsertPet(ctx context.Context, in *InsertPetRequest, out *InsertPetResponse) error {
	return h.PetServiceHandler.InsertPet(ctx, in, out)
}

func (h *petServiceHandler) UpdatePet(ctx context.Context, in *UpdatePetRequest, out *Empty) error {
	return h.PetServiceHandler.UpdatePet(ctx, in, out)
}
