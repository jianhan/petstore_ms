// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jianhan/petstore_ms/srv/store/proto/pet (interfaces: PetService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pet "github.com/jianhan/petstore_ms/srv/store/proto/pet"
	client "github.com/micro/go-micro/client"
	reflect "reflect"
)

// MockPetService is a mock of PetService interface
type MockPetService struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceMockRecorder
}

// MockPetServiceMockRecorder is the mock recorder for MockPetService
type MockPetServiceMockRecorder struct {
	mock *MockPetService
}

// NewMockPetService creates a new mock instance
func NewMockPetService(ctrl *gomock.Controller) *MockPetService {
	mock := &MockPetService{ctrl: ctrl}
	mock.recorder = &MockPetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetService) EXPECT() *MockPetServiceMockRecorder {
	return m.recorder
}

// InsertPet mocks base method
func (m *MockPetService) InsertPet(arg0 context.Context, arg1 *pet.InsertPetRequest, arg2 ...client.CallOption) (*pet.InsertPetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertPet", varargs...)
	ret0, _ := ret[0].(*pet.InsertPetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPet indicates an expected call of InsertPet
func (mr *MockPetServiceMockRecorder) InsertPet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPet", reflect.TypeOf((*MockPetService)(nil).InsertPet), varargs...)
}

// UpdatePet mocks base method
func (m *MockPetService) UpdatePet(arg0 context.Context, arg1 *pet.UpdatePetRequest, arg2 ...client.CallOption) (*pet.UpdatePetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePet", varargs...)
	ret0, _ := ret[0].(*pet.UpdatePetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePet indicates an expected call of UpdatePet
func (mr *MockPetServiceMockRecorder) UpdatePet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockPetService)(nil).UpdatePet), varargs...)
}
